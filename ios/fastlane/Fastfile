default_platform(:ios)

KEYCHAIN_NAME = ENV["KEYCHAIN_NAME"]
KEYCHAIN_PASSWORD = ENV["KEYCHAIN_PASSWORD"]
API_KEY_ID = ENV["API_KEY_ID"]
API_KEY_ISSUER_ID = ENV["API_KEY_ISSUER_ID"]
API_KEY_BASE64 = ENV["API_KEY_BASE64"]
MATCH_GIT_BASIC_AUTHORIZATION = ENV["MATCH_GIT_BASIC_AUTHORIZATION"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
APPLE_TEAM_ID = ENV["DEVELAPPLE_TEAM_IDOPER_APP_ID"]

xcode_select("/Applications/Xcode_14.3.app")

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
  desc "Push a new release build to the App Store"
  
  lane :build_and_deploy do |options|
    xcversion(version: "14.2")
    ensure_temp_keychain(KEYCHAIN_NAME, KEYCHAIN_PASSWORD)

    api_key = app_store_connect_api_key(
      key_id: API_KEY_ID,
      issuer_id: API_KEY_ISSUER_ID,
      key_content: API_KEY_BASE64,  
      is_key_content_base64: true,          
      duration: 1200,            
      in_house: false
    )

    update_code_signing_settings(
      use_automatic_signing: false,
      profile_name: "match AppStore #{DEVELOPER_APP_IDENTIFIER}",
      bundle_identifier: DEVELOPER_APP_IDENTIFIER,
      code_sign_identity: "iPhone Distribution",
      team_id: APPLE_TEAM_ID
    )

    match(
      type: 'appstore',
      app_identifier: DEVELOPER_APP_IDENTIFIER,
      git_basic_authorization: Base64.strict_encode64(MATCH_GIT_BASIC_AUTHORIZATION),
      readonly: false,
      keychain_name: KEYCHAIN_NAME,
      keychain_password: KEYCHAIN_PASSWORD,
      api_key: api_key
    )

    cocoapods(
      clean_install: true,
      repo_update: true
    )
    
    gym(
      configuration: "Release",
      scheme: "Runner",
      workspace: "Runner.xcworkspace",
      export_method: "app-store",
      clean: true,
      export_options: {
        provisioningProfiles: { 
            DEVELOPER_APP_ID => DEVELOPER_APP_IDENTIFIER
        }
      }
    )

    skip_deploy = options.fetch(:skip_deploy, false)
    if skip_deploy
      puts('DEPLOY')
    else 
      pilot(
      api_key: api_key,
      skip_waiting_for_build_processing: true
    )
    end
  end

  after_all do 
    delete_temp_keychain(KEYCHAIN_NAME)
  end

  error do 
    delete_temp_keychain(KEYCHAIN_NAME)
  end
end
